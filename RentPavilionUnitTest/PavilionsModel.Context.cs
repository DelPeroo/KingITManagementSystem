//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RentPavilionUnitTest
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PavilionsDbEntities : DbContext
    {
        public PavilionsDbEntities()
            : base("name=PavilionsDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int RentPavilion(Nullable<int> pavilionId, Nullable<System.DateTime> leaseStart, Nullable<System.DateTime> leaseEnd, Nullable<int> tenantId, Nullable<int> empId)
        {
            var pavilionIdParameter = pavilionId.HasValue ?
                new ObjectParameter("PavilionId", pavilionId) :
                new ObjectParameter("PavilionId", typeof(int));
    
            var leaseStartParameter = leaseStart.HasValue ?
                new ObjectParameter("LeaseStart", leaseStart) :
                new ObjectParameter("LeaseStart", typeof(System.DateTime));
    
            var leaseEndParameter = leaseEnd.HasValue ?
                new ObjectParameter("LeaseEnd", leaseEnd) :
                new ObjectParameter("LeaseEnd", typeof(System.DateTime));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("TenantId", tenantId) :
                new ObjectParameter("TenantId", typeof(int));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RentPavilion", pavilionIdParameter, leaseStartParameter, leaseEndParameter, tenantIdParameter, empIdParameter);
        }
    }
}
